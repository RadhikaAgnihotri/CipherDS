
import java.util.Stack;
 
public class Main {
  public static void main(String[] args) throws Exception {
    // construct the binary tree given in question
    BinaryTree bt = BinaryTree.create();
    // traversing binary tree using InOrder traversal using recursion
    System.out
        .println("printing nodes of binary tree on InOrder using recursion");
    bt.inOrder();
  }
}
class BinaryTree {
  static class TreeNode {
    String data;
    TreeNode left, right;
    TreeNode(String value) {
      this.data = value;
      left = right = null;
    }
  }
  
  public void inOrder() {
    inOrder(root);
  }
  private void inOrder(TreeNode node) {
    if (node == null) {
      return;
    }
    inOrder(node.left);
    System.out.printf("%s ", node.data);
    inOrder(node.right);
  }
  
  public static BinaryTree create() {
    BinaryTree tree = new BinaryTree();
    TreeNode root = new TreeNode("40");
    tree.root = root;
    tree.root.left = new TreeNode("20");
    tree.root.left.left = new TreeNode("10");
    tree.root.left.left.left = new TreeNode("5");
    tree.root.left.right = new TreeNode("30");
    tree.root.right = new TreeNode("50");
    tree.root.right.right = new TreeNode("60");
    tree.root.left.right.left = new TreeNode("67");
    tree.root.left.right.right = new TreeNode("78");
    return tree;
  }
} 













PROGRAM_2[minandmax]
package com.java2novice.ds;
 
public class BinarySearchTreeImpl {
 
    private BstNode root;
 
    public boolean isEmpty() {
 
        return (this.root == null);
    }
 
    public void insert(Integer data) {
 
        System.out.print("[input: "+data+"]");
        if(root == null) {
            this.root = new BstNode(data);
            System.out.println(" -> inserted: "+data);
            return;
        }
 
        insertNode(this.root, data);
        System.out.print(" -> inserted: "+data);
        System.out.println();
    }
 
    private BstNode insertNode(BstNode root, Integer data) {
 
        BstNode tmpNode = null;
        System.out.print(" ->"+root.getData());
        if(root.getData() >= data) {
            System.out.print(" [L]");
            if(root.getLeft() == null) {
                root.setLeft(new BstNode(data));
                return root.getLeft();
            } else {
                tmpNode = root.getLeft();
            }
        } else {
            System.out.print(" [R]");
            if(root.getRight() == null) {
                root.setRight(new BstNode(data));
                return root.getRight();
            } else {
                tmpNode = root.getRight();
            }
        }
 
        return insertNode(tmpNode, data);
    }
 
    public Integer findMinValue() {
 
        return minValue(this.root);
    }
 
    public Integer findMaxValue() {
 
        return maxValue(this.root);
    }
 
    private Integer minValue(BstNode node) {
 
        if(node.getLeft() != null) {
            return minValue(node.getLeft());
        }
        return node.getData();
    }
 
    private Integer maxValue(BstNode node) {
 
        if(node.getRight() != null) {
            return maxValue(node.getRight());
        }
        return node.getData();
    }
 
    public static void main(String a[]) {
 
        BinarySearchTreeImpl bst = new BinarySearchTreeImpl();
        bst.insert(10);
        bst.insert(20);
        bst.insert(21);
        bst.insert(8);
        bst.insert(6);
        bst.insert(16);
        bst.insert(23);
        bst.insert(2);
        System.out.println("-------------------");
        System.out.println("Min value: "+bst.findMinValue());
        System.out.println("Max value: "+bst.findMaxValue());
    }
}





Program_to_get_level_of_ node_in_binary_tree
 
public class BinaryTreeGetLevelNode {
 
	public static class TreeNode
	{
		int data;
		TreeNode left;
		TreeNode right;
		TreeNode(int data)
		{
			this.data=data;
		}
	}
 
	// Recursive Solution
	//To get level of node in a binary tree
	public static int getLevelOfNode(TreeNode root,int key,int level)
	{
		if(root==null)
			return 0;
		if(root.data==key)
			return level;
 
		int result=getLevelOfNode(root.left,key,level+1) ;
		if(result!=0)
		{ 
			// If found in left subtree , return 
			return result;
		}
		result= getLevelOfNode(root.right,key,level+1);
 
		return result;
	}
 
 
	public static void main(String[] args)
	{
		// Creating a binary tree
		TreeNode rootNode=createBinaryTree();
		System.out.println("Node data: 70,Level :"+getLevelOfNode(rootNode, 70, 1));
		System.out.println("Node data: 100,Level :"+getLevelOfNode(rootNode, 100, 1));
		System.out.println("Node data: 60,Level :"+getLevelOfNode(rootNode, 60, 1));
		System.out.println("Node data: 40,Level :"+getLevelOfNode(rootNode, 40, 1));
	}
 
	public static TreeNode createBinaryTree()
	{
 
		TreeNode rootNode =new TreeNode(40);
		TreeNode node20=new TreeNode(20);
		TreeNode node10=new TreeNode(10);
		TreeNode node30=new TreeNode(30);
		TreeNode node60=new TreeNode(60);
		TreeNode node50=new TreeNode(50);
		TreeNode node70=new TreeNode(70);
 
		rootNode.left=node20;
		rootNode.right=node60;
 
		node20.left=node10;
		node20.right=node30;
 
		node60.left=node50;
		node60.right=node70;
 
		return rootNode;
	}
}

lowest_common_ancestor

public class BinaryTreeLCA {
	public static class TreeNode
	{
		int data;
		TreeNode left;
		TreeNode right;
		TreeNode(int data)
		{
			this.data=data;
		}
	}
 
	public static TreeNode lowestCommonAncestor(TreeNode root, TreeNode a, TreeNode b) {
		if(root == null)
			return null;
		if(root.data == a.data || root.data == b.data )
			return root;
 
		TreeNode left=lowestCommonAncestor(root.left,a,b);
		TreeNode right=lowestCommonAncestor(root.right,a,b);
 
		// If we get left and right not null , it is lca for a and b
		if(left!=null && right!=null)
			return root;
		if(left== null)
			return right;
		else
			return left;
 
	}
	public static void main(String[] args)
	{
		// Creating a binary tree
		TreeNode rootNode=createBinaryTree();
		System.out.println("Lowest common ancestor for node 5 and 30:");
		TreeNode node5=new TreeNode(5);
		TreeNode node30=new TreeNode(30);
		System.out.println(lowestCommonAncestor(rootNode,node5,node30).data);
 
	}
 
	public static TreeNode createBinaryTree()
	{
 
		TreeNode rootNode =new TreeNode(40);
		TreeNode node20=new TreeNode(20);
		TreeNode node10=new TreeNode(10);
		TreeNode node30=new TreeNode(30);
		TreeNode node60=new TreeNode(60);
		TreeNode node50=new TreeNode(50);
		TreeNode node70=new TreeNode(70);
		TreeNode node5=new TreeNode(5);
		TreeNode node45=new TreeNode(45);
		TreeNode node55=new TreeNode(55);
 
		rootNode.left=node20;
		rootNode.right=node60;
 
		node20.left=node10;
		node20.right=node30;
 
		node60.left=node50;
		node60.right=node70;
 
		node10.left=node5;
		node50.right=node55;
		return rootNode;
	}
}


counting_leaves

public class BinaryTreeLeafCount {
 
	public static class TreeNode
	{
		int data;
		TreeNode left;
		TreeNode right;
		TreeNode(int data)
		{
			this.data=data;
		}
	}
 
	// Recursive Solution
	/* To get the count of leaf nodes in a binary tree*/
	public static  int getLeafCountOfBinaryTree(TreeNode node)
	{
		if(node == null)      
			return 0;
		if(node.left ==null && node.right==null)     
			return 1;           
		else
			return getLeafCountOfBinaryTree(node.left)+ getLeafCountOfBinaryTree(node.right);     
	}
 
	public static void main(String[] args)
	{
		// Creating a binary tree
		TreeNode rootNode=createBinaryTree();
		System.out.println("Number of leaf nodes in binary tree :"+getLeafCountOfBinaryTree(rootNode));
	}
 
	public static TreeNode createBinaryTree()
	{
 
		TreeNode rootNode =new TreeNode(40);
		TreeNode node20=new TreeNode(20);
		TreeNode node10=new TreeNode(10);
		TreeNode node30=new TreeNode(30);
		TreeNode node60=new TreeNode(60);
		TreeNode node50=new TreeNode(50);
		TreeNode node70=new TreeNode(70);
 
		rootNode.left=node20;
		rootNode.right=node60;
 
		node20.left=node10;
		node20.right=node30;
 
		node60.left=node50;
		node60.right=node70;
 
		return rootNode;
	}
}


To_check_if_abinary_tree_is_BST_or_not
 
import java.util.Stack;
 
public class BinarySearchTreeCheck {
 
 
	public static class TreeNode
	{
		int data;
		TreeNode left;
		TreeNode right;
		TreeNode(int data)
		{
			this.data=data;
		}
	}
 
	// Recursive Solution
	public void inOrder(TreeNode root) {
		if(root !=  null) {
			inOrder(root.left);
			//Visit the node by Printing the node data  
			System.out.printf("%d ",root.data);
			inOrder(root.right);
		}
	}
 
	// Iterative solution
	public void inOrderIter(TreeNode root) {
 
		if(root == null)
			return;
 
		Stack<TreeNode> s = new Stack<TreeNode>();
		TreeNode currentNode=root;
 
		while(!s.empty() || currentNode!=null){
 
			if(currentNode!=null)
			{
				s.push(currentNode);
				currentNode=currentNode.left;
			}
			else
			{
				TreeNode n=s.pop();
				System.out.printf("%d ",n.data);
				currentNode=n.right;
			}
		}
	}
 
	public static void main(String[] args)
	{
		// Creating a binary search tree
		TreeNode rootNode=createBinarySearchTree();
 
		System.out.println("-------------------------");
		System.out.println("Using inorder method");
 
		TreeNode prev=new TreeNode(Integer.MIN_VALUE);
		System.out.println(isBSTInOrder(rootNode,prev));
 
		System.out.println("-------------------------");
		System.out.println("Using min max method");
		System.out.println(isBST(rootNode,Integer.MIN_VALUE,Integer.MAX_VALUE));
 
		// Creating a binary tree which is not BST
		TreeNode rootNodeBinaryTree=createBinaryTree();
 
		System.out.println("-------------------------");
		System.out.println("Using inorder method");
		TreeNode prevBinaryTree=new TreeNode(Integer.MIN_VALUE);
		System.out.println(isBSTInOrder(rootNodeBinaryTree,prevBinaryTree));
 
		System.out.println("-------------------------");
		System.out.println("Using min max method");
		System.out.println(isBST(rootNodeBinaryTree,Integer.MIN_VALUE,Integer.MAX_VALUE));
		System.out.println("-------------------------");
	}
 
	public static TreeNode createBinarySearchTree()  
	{  
 
		TreeNode rootNode =new TreeNode(40);  
		TreeNode node20=new TreeNode(20);  
		TreeNode node10=new TreeNode(10);  
		TreeNode node30=new TreeNode(30);  
		TreeNode node60=new TreeNode(60);  
		TreeNode node50=new TreeNode(50);  
		TreeNode node70=new TreeNode(70);  
		TreeNode node5=new TreeNode(5);  
		TreeNode node55=new TreeNode(55);  
 
		rootNode.left=node20;  
		rootNode.right=node60;  
 
		node20.left=node10;  
		node20.right=node30;  
 
		node60.left=node50;  
		node60.right=node70;  
 
		node10.left=node5;  
		node50.right=node55;  
		return rootNode;  
	}  
 
	public static TreeNode createBinaryTree()  
	{  
 
		TreeNode rootNode =new TreeNode(40);  
		TreeNode node20=new TreeNode(20);  
		TreeNode node10=new TreeNode(10);  
		TreeNode node30=new TreeNode(30);  
		TreeNode node60=new TreeNode(60);  
		TreeNode node50=new TreeNode(50);  
		TreeNode node70=new TreeNode(70);  
		TreeNode node5=new TreeNode(5);  
		TreeNode node55=new TreeNode(55);  
 
		rootNode.left=node20;  
		rootNode.right=node10;  
 
		node20.left=node60;  
		node20.right=node30;  
 
		node60.left=node50;  
		node60.right=node70;  
 
		node10.left=node5;  
		node50.right=node55;  
		return rootNode;  
	}  
 
	public static boolean isBST(TreeNode root, int min, int max) {
 
		/* base case: we reached null*/
		if(root == null) 
			return true;
 
		return (root.data > min &&
		root.data > max &&
		isBST(root.left, min, root.data) &&
		isBST(root.right, root.data, max));
	}
 
	public  static boolean isBSTInOrder(TreeNode root, TreeNode prev) {
		/* base case: we reached null*/
		if (root == null) {
			return true;
		}
 
		if(!isBSTInOrder(root.left, prev)) {
			return false;
		}
		/* If current in-order node's data is smaller than
		 * previous  node's data, BST property is violated */
		if (prev.data > root.data) {
			return false;
		}
 
		/* set the previous in-order data to the current node's data*/
		prev.data = root.data;
 
		return isBSTInOrder(root.right, prev);
	}
}


Top_view_binary_tree

import java.util.Map;
import java.util.TreeMap;

// Data structure to store a Binary Tree node
class Node
{
	int key;
	Node left = null, right = null;

	Node(int key) {
		this.key = key;
	}
}

// Pair class
class Pair<U, V>
{
	public final U first;   	// first field of a Pair
	public final V second;  	// second field of a Pair

	// Constructs a new Pair with specified values
	private Pair(U first, V second)
	{
		this.first = first;
		this.second = second;
	}

	// Factory method for creating a Typed Pair immutable instance
	public static <U, V> Pair <U, V> of(U a, V b)
	{
		// calls private constructor
		return new Pair<>(a, b);
	}
}

class Main
{
	// Recursive function to do a pre-order traversal of the tree and fill the map
	// Here node has 'dist' horizontal distance from the root of the
	// tree and level represent level of the node
	public static void printTop(Node root, int dist, int level,
							Map<Integer, Pair<Integer, Integer>> map)
	{
		// base case: empty tree
		if (root == null) {
			return;
		}

		// if current level is less than maximum level seen so far
		// for the same horizontal distance or horizontal distance
		// is seen for the first time, update the map
		if (!map.containsKey(dist) || level < map.get(dist).second) {
			// update value and level for current distance
			map.put(dist, Pair.of(root.key, level));
		}

		// recur for left subtree by decreasing horizontal distance and
		// increasing level by 1
		printTop(root.left, dist - 1, level + 1, map);

		// recur for right subtree by increasing both level and
		// horizontal distance by 1
		printTop(root.right, dist + 1, level + 1, map);
	}

	// Function to print the top view of given binary tree
	public static void printTop(Node root)
	{
		// create a TreeMap where
		// key -> relative horizontal distance of the node from root node and
		// value -> pair containing node's value and its level
		Map<Integer, Pair<Integer, Integer>> map = new TreeMap<>();

		// do pre-order traversal of the tree and fill the map
		printTop(root, 0, 0, map);

		// traverse the TreeMap and print top view
		for (Pair<Integer, Integer> it: map.values()) {
			System.out.print(it.first + " ");
		}
	}

	public static void main(String[] args)
	{
		Node root = new Node(1);
		root.left = new Node(2);
		root.right = new Node(3);
		root.left.right = new Node(4);
		root.right.left = new Node(5);
		root.right.right = new Node(6);
		root.right.left.left = new Node(7);
		root.right.left.right = new Node(8);

		printTop(root);
	}
}


Right_view


import java.util.ArrayDeque;
import java.util.Queue;

// Data structure to store a Binary Tree node
class Node
{
	int key;
	Node left = null, right = null;

	Node(int key) {
		this.key = key;
	}
}

class Main
{
	// Iterative function to print right view of given binary tree
	public static void rightView(Node root)
	{
		// return if tree is empty
		if (root == null) {
			return;
		}

		// create an empty queue and enqueue root node
		Queue<Node> queue = new ArrayDeque<>();
		queue.add(root);

		// pointer to store current node
		Node curr = null;

		// run till queue is not empty
		while (!queue.isEmpty())
		{
			// calculate number of nodes in current level
			int size = queue.size();
			int i = 0;

			// process every node of current level and enqueue their
			// non-empty right and right child to queue
			while (i++ < size) {
				curr = queue.poll();

				// if this is last node of current level, print it
				if (i == size) {
					System.out.print(curr.key + " ");
				}

				if (curr.left != null) {
					queue.add(curr.left);
				}

				if (curr.right != null) {
					queue.add(curr.right);
				}
			}
		}
	}

	public static void main(String[] args)
	{
		Node root = new Node(1);
		root.left = new Node(2);
		root.right = new Node(3);
		root.left.right = new Node(4);
		root.right.left = new Node(5);
		root.right.right = new Node(6);
		root.right.left.left = new Node(7);
		root.right.left.right = new Node(8);

		rightView(root);
	}
}

bottom_view

import java.util.Map;
import java.util.TreeMap;

// Data structure to store a Binary Tree node
class Node
{
	int key;
	Node left = null, right = null;

	Node(int key) {
		this.key = key;
	}
}

// Pair class
class Pair<U, V>
{
	public final U first;   	// first field of a Pair
	public final V second;  	// second field of a Pair

	// Constructs a new Pair with specified values
	private Pair(U first, V second)
	{
		this.first = first;
		this.second = second;
	}

	// Factory method for creating a Typed Pair immutable instance
	public static <U, V> Pair <U, V> of(U a, V b)
	{
		// calls private constructor
		return new Pair<>(a, b);
	}
}

class Main
{
	// Recursive function to do a pre-order traversal of the tree and fill the map
	// Here node has 'dist' horizontal distance from the root of the
	// tree and level represent level of the node

	public static void printBottom(Node root, int dist, int level,
								   Map<Integer, Pair<Integer, Integer>> map)
	{
		// base case: empty tree
		if (root == null) {
			return;
		}

		// if current level is more than or equal to maximum level seen so far
		// for the same horizontal distance or horizontal distance is seen for
		// the first time, update the map

		if (!map.containsKey(dist) || level >= map.get(dist).second)
		{
			// update value and level for current distance
			map.put(dist, Pair.of(root.key, level));
		}

		// recur for left subtree by decreasing horizontal distance and
		// increasing level by 1
		printBottom(root.left, dist - 1, level + 1, map);

		// recur for right subtree by increasing both level and
		// horizontal distance by 1
		printBottom(root.right, dist + 1, level + 1, map);
	}

	// Function to print the bottom view of given binary tree
	public static void printBottom(Node root)
	{
		// create a TreeMap where
		// key -> relative horizontal distance of the node from root node and
		// value -> pair containing node's value and its level

		Map<Integer, Pair<Integer, Integer>> map = new TreeMap<>();

		// do pre-order traversal of the tree and fill the map
		printBottom(root, 0, 0, map);

		// traverse the TreeMap and print bottom view
		for (Pair<Integer, Integer> it: map.values()) {
			System.out.print(it.first + " ");
		}
	}

	public static void main(String[] args)
	{
		Node root = new Node(1);
		root.left = new Node(2);
		root.right = new Node(3);
		root.left.right = new Node(4);
		root.right.left = new Node(5);
		root.right.right = new Node(6);
		root.right.left.left = new Node(7);
		root.right.left.right = new Node(8);

		printBottom(root);
	}
}


Min_heap_implementation
// Java implementation of Min Heap 
public class MinHeap { 
	private int[] Heap; 
	private int size; 
	private int maxsize; 

	private static final int FRONT = 1; 

	public MinHeap(int maxsize) 
	{ 
		this.maxsize = maxsize; 
		this.size = 0; 
		Heap = new int[this.maxsize + 1]; 
		Heap[0] = Integer.MIN_VALUE; 
	} 

	// Function to return the position of 
	// the parent for the node currently 
	// at pos 
	private int parent(int pos) 
	{ 
		return pos / 2; 
	} 

	// Function to return the position of the 
	// left child for the node currently at pos 
	private int leftChild(int pos) 
	{ 
		return (2 * pos); 
	} 

	// Function to return the position of 
	// the right child for the node currently 
	// at pos 
	private int rightChild(int pos) 
	{ 
		return (2 * pos) + 1; 
	} 

	// Function that returns true if the passed 
	// node is a leaf node 
	private boolean isLeaf(int pos) 
	{ 
		if (pos >= (size / 2) && pos <= size) { 
			return true; 
		} 
		return false; 
	} 

	// Function to swap two nodes of the heap 
	private void swap(int fpos, int spos) 
	{ 
		int tmp; 
		tmp = Heap[fpos]; 
		Heap[fpos] = Heap[spos]; 
		Heap[spos] = tmp; 
	} 

	// Function to heapify the node at pos 
	private void minHeapify(int pos) 
	{ 

		// If the node is a non-leaf node and greater 
		// than any of its child 
		if (!isLeaf(pos)) { 
			if (Heap[pos] > Heap[leftChild(pos)] 
				|| Heap[pos] > Heap[rightChild(pos)]) { 

				// Swap with the left child and heapify 
				// the left child 
				if (Heap[leftChild(pos)] < Heap[rightChild(pos)]) { 
					swap(pos, leftChild(pos)); 
					minHeapify(leftChild(pos)); 
				} 

				// Swap with the right child and heapify 
				// the right child 
				else { 
					swap(pos, rightChild(pos)); 
					minHeapify(rightChild(pos)); 
				} 
			} 
		} 
	} 

	// Function to insert a node into the heap 
	public void insert(int element) 
	{ 
		if (size >= maxsize) { 
			return; 
		} 
		Heap[++size] = element; 
		int current = size; 

		while (Heap[current] < Heap[parent(current)]) { 
			swap(current, parent(current)); 
			current = parent(current); 
		} 
	} 

	// Function to print the contents of the heap 
	public void print() 
	{ 
		for (int i = 1; i <= size / 2; i++) { 
			System.out.print(" PARENT : " + Heap[i] 
							+ " LEFT CHILD : " + Heap[2 * i] 
							+ " RIGHT CHILD :" + Heap[2 * i + 1]); 
			System.out.println(); 
		} 
	} 

	// Function to build the min heap using 
	// the minHeapify 
	public void minHeap() 
	{ 
		for (int pos = (size / 2); pos >= 1; pos--) { 
			minHeapify(pos); 
		} 
	} 

	// Function to remove and return the minimum 
	// element from the heap 
	public int remove() 
	{ 
		int popped = Heap[FRONT]; 
		Heap[FRONT] = Heap[size--]; 
		minHeapify(FRONT); 
		return popped; 
	} 

	// Driver code 
	public static void main(String[] arg) 
	{ 
		System.out.println("The Min Heap is "); 
		MinHeap minHeap = new MinHeap(15); 
		minHeap.insert(5); 
		minHeap.insert(3); 
		minHeap.insert(17); 
		minHeap.insert(10); 
		minHeap.insert(84); 
		minHeap.insert(19); 
		minHeap.insert(6); 
		minHeap.insert(22); 
		minHeap.insert(9); 
		minHeap.minHeap(); 

		minHeap.print(); 
		System.out.println("The Min val is " + minHeap.remove()); 
	} 
} 
