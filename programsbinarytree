
import java.util.Stack;
 
public class Main {
  public static void main(String[] args) throws Exception {
    // construct the binary tree given in question
    BinaryTree bt = BinaryTree.create();
    // traversing binary tree using InOrder traversal using recursion
    System.out
        .println("printing nodes of binary tree on InOrder using recursion");
    bt.inOrder();
  }
}
class BinaryTree {
  static class TreeNode {
    String data;
    TreeNode left, right;
    TreeNode(String value) {
      this.data = value;
      left = right = null;
    }
  }
  
  public void inOrder() {
    inOrder(root);
  }
  private void inOrder(TreeNode node) {
    if (node == null) {
      return;
    }
    inOrder(node.left);
    System.out.printf("%s ", node.data);
    inOrder(node.right);
  }
  
  public static BinaryTree create() {
    BinaryTree tree = new BinaryTree();
    TreeNode root = new TreeNode("40");
    tree.root = root;
    tree.root.left = new TreeNode("20");
    tree.root.left.left = new TreeNode("10");
    tree.root.left.left.left = new TreeNode("5");
    tree.root.left.right = new TreeNode("30");
    tree.root.right = new TreeNode("50");
    tree.root.right.right = new TreeNode("60");
    tree.root.left.right.left = new TreeNode("67");
    tree.root.left.right.right = new TreeNode("78");
    return tree;
  }
} 













PROGRAM_2[minandmax]
package com.java2novice.ds;
 
public class BinarySearchTreeImpl {
 
    private BstNode root;
 
    public boolean isEmpty() {
 
        return (this.root == null);
    }
 
    public void insert(Integer data) {
 
        System.out.print("[input: "+data+"]");
        if(root == null) {
            this.root = new BstNode(data);
            System.out.println(" -> inserted: "+data);
            return;
        }
 
        insertNode(this.root, data);
        System.out.print(" -> inserted: "+data);
        System.out.println();
    }
 
    private BstNode insertNode(BstNode root, Integer data) {
 
        BstNode tmpNode = null;
        System.out.print(" ->"+root.getData());
        if(root.getData() >= data) {
            System.out.print(" [L]");
            if(root.getLeft() == null) {
                root.setLeft(new BstNode(data));
                return root.getLeft();
            } else {
                tmpNode = root.getLeft();
            }
        } else {
            System.out.print(" [R]");
            if(root.getRight() == null) {
                root.setRight(new BstNode(data));
                return root.getRight();
            } else {
                tmpNode = root.getRight();
            }
        }
 
        return insertNode(tmpNode, data);
    }
 
    public Integer findMinValue() {
 
        return minValue(this.root);
    }
 
    public Integer findMaxValue() {
 
        return maxValue(this.root);
    }
 
    private Integer minValue(BstNode node) {
 
        if(node.getLeft() != null) {
            return minValue(node.getLeft());
        }
        return node.getData();
    }
 
    private Integer maxValue(BstNode node) {
 
        if(node.getRight() != null) {
            return maxValue(node.getRight());
        }
        return node.getData();
    }
 
    public static void main(String a[]) {
 
        BinarySearchTreeImpl bst = new BinarySearchTreeImpl();
        bst.insert(10);
        bst.insert(20);
        bst.insert(21);
        bst.insert(8);
        bst.insert(6);
        bst.insert(16);
        bst.insert(23);
        bst.insert(2);
        System.out.println("-------------------");
        System.out.println("Min value: "+bst.findMinValue());
        System.out.println("Max value: "+bst.findMaxValue());
    }
}





Program_to_get_level_of_ node_in_binary_tree
 
public class BinaryTreeGetLevelNode {
 
	public static class TreeNode
	{
		int data;
		TreeNode left;
		TreeNode right;
		TreeNode(int data)
		{
			this.data=data;
		}
	}
 
	// Recursive Solution
	//To get level of node in a binary tree
	public static int getLevelOfNode(TreeNode root,int key,int level)
	{
		if(root==null)
			return 0;
		if(root.data==key)
			return level;
 
		int result=getLevelOfNode(root.left,key,level+1) ;
		if(result!=0)
		{ 
			// If found in left subtree , return 
			return result;
		}
		result= getLevelOfNode(root.right,key,level+1);
 
		return result;
	}
 
 
	public static void main(String[] args)
	{
		// Creating a binary tree
		TreeNode rootNode=createBinaryTree();
		System.out.println("Node data: 70,Level :"+getLevelOfNode(rootNode, 70, 1));
		System.out.println("Node data: 100,Level :"+getLevelOfNode(rootNode, 100, 1));
		System.out.println("Node data: 60,Level :"+getLevelOfNode(rootNode, 60, 1));
		System.out.println("Node data: 40,Level :"+getLevelOfNode(rootNode, 40, 1));
	}
 
	public static TreeNode createBinaryTree()
	{
 
		TreeNode rootNode =new TreeNode(40);
		TreeNode node20=new TreeNode(20);
		TreeNode node10=new TreeNode(10);
		TreeNode node30=new TreeNode(30);
		TreeNode node60=new TreeNode(60);
		TreeNode node50=new TreeNode(50);
		TreeNode node70=new TreeNode(70);
 
		rootNode.left=node20;
		rootNode.right=node60;
 
		node20.left=node10;
		node20.right=node30;
 
		node60.left=node50;
		node60.right=node70;
 
		return rootNode;
	}
}

lowest_common_ancestor

public class BinaryTreeLCA {
	public static class TreeNode
	{
		int data;
		TreeNode left;
		TreeNode right;
		TreeNode(int data)
		{
			this.data=data;
		}
	}
 
	public static TreeNode lowestCommonAncestor(TreeNode root, TreeNode a, TreeNode b) {
		if(root == null)
			return null;
		if(root.data == a.data || root.data == b.data )
			return root;
 
		TreeNode left=lowestCommonAncestor(root.left,a,b);
		TreeNode right=lowestCommonAncestor(root.right,a,b);
 
		// If we get left and right not null , it is lca for a and b
		if(left!=null && right!=null)
			return root;
		if(left== null)
			return right;
		else
			return left;
 
	}
	public static void main(String[] args)
	{
		// Creating a binary tree
		TreeNode rootNode=createBinaryTree();
		System.out.println("Lowest common ancestor for node 5 and 30:");
		TreeNode node5=new TreeNode(5);
		TreeNode node30=new TreeNode(30);
		System.out.println(lowestCommonAncestor(rootNode,node5,node30).data);
 
	}
 
	public static TreeNode createBinaryTree()
	{
 
		TreeNode rootNode =new TreeNode(40);
		TreeNode node20=new TreeNode(20);
		TreeNode node10=new TreeNode(10);
		TreeNode node30=new TreeNode(30);
		TreeNode node60=new TreeNode(60);
		TreeNode node50=new TreeNode(50);
		TreeNode node70=new TreeNode(70);
		TreeNode node5=new TreeNode(5);
		TreeNode node45=new TreeNode(45);
		TreeNode node55=new TreeNode(55);
 
		rootNode.left=node20;
		rootNode.right=node60;
 
		node20.left=node10;
		node20.right=node30;
 
		node60.left=node50;
		node60.right=node70;
 
		node10.left=node5;
		node50.right=node55;
		return rootNode;
	}
}


counting_leaves

public class BinaryTreeLeafCount {
 
	public static class TreeNode
	{
		int data;
		TreeNode left;
		TreeNode right;
		TreeNode(int data)
		{
			this.data=data;
		}
	}
 
	// Recursive Solution
	/* To get the count of leaf nodes in a binary tree*/
	public static  int getLeafCountOfBinaryTree(TreeNode node)
	{
		if(node == null)      
			return 0;
		if(node.left ==null && node.right==null)     
			return 1;           
		else
			return getLeafCountOfBinaryTree(node.left)+ getLeafCountOfBinaryTree(node.right);     
	}
 
	public static void main(String[] args)
	{
		// Creating a binary tree
		TreeNode rootNode=createBinaryTree();
		System.out.println("Number of leaf nodes in binary tree :"+getLeafCountOfBinaryTree(rootNode));
	}
 
	public static TreeNode createBinaryTree()
	{
 
		TreeNode rootNode =new TreeNode(40);
		TreeNode node20=new TreeNode(20);
		TreeNode node10=new TreeNode(10);
		TreeNode node30=new TreeNode(30);
		TreeNode node60=new TreeNode(60);
		TreeNode node50=new TreeNode(50);
		TreeNode node70=new TreeNode(70);
 
		rootNode.left=node20;
		rootNode.right=node60;
 
		node20.left=node10;
		node20.right=node30;
 
		node60.left=node50;
		node60.right=node70;
 
		return rootNode;
	}
}


To_check_if_abinary_tree_is_BST_or_not
 
import java.util.Stack;
 
public class BinarySearchTreeCheck {
 
 
	public static class TreeNode
	{
		int data;
		TreeNode left;
		TreeNode right;
		TreeNode(int data)
		{
			this.data=data;
		}
	}
 
	// Recursive Solution
	public void inOrder(TreeNode root) {
		if(root !=  null) {
			inOrder(root.left);
			//Visit the node by Printing the node data  
			System.out.printf("%d ",root.data);
			inOrder(root.right);
		}
	}
 
	// Iterative solution
	public void inOrderIter(TreeNode root) {
 
		if(root == null)
			return;
 
		Stack<TreeNode> s = new Stack<TreeNode>();
		TreeNode currentNode=root;
 
		while(!s.empty() || currentNode!=null){
 
			if(currentNode!=null)
			{
				s.push(currentNode);
				currentNode=currentNode.left;
			}
			else
			{
				TreeNode n=s.pop();
				System.out.printf("%d ",n.data);
				currentNode=n.right;
			}
		}
	}
 
	public static void main(String[] args)
	{
		// Creating a binary search tree
		TreeNode rootNode=createBinarySearchTree();
 
		System.out.println("-------------------------");
		System.out.println("Using inorder method");
 
		TreeNode prev=new TreeNode(Integer.MIN_VALUE);
		System.out.println(isBSTInOrder(rootNode,prev));
 
		System.out.println("-------------------------");
		System.out.println("Using min max method");
		System.out.println(isBST(rootNode,Integer.MIN_VALUE,Integer.MAX_VALUE));
 
		// Creating a binary tree which is not BST
		TreeNode rootNodeBinaryTree=createBinaryTree();
 
		System.out.println("-------------------------");
		System.out.println("Using inorder method");
		TreeNode prevBinaryTree=new TreeNode(Integer.MIN_VALUE);
		System.out.println(isBSTInOrder(rootNodeBinaryTree,prevBinaryTree));
 
		System.out.println("-------------------------");
		System.out.println("Using min max method");
		System.out.println(isBST(rootNodeBinaryTree,Integer.MIN_VALUE,Integer.MAX_VALUE));
		System.out.println("-------------------------");
	}
 
	public static TreeNode createBinarySearchTree()  
	{  
 
		TreeNode rootNode =new TreeNode(40);  
		TreeNode node20=new TreeNode(20);  
		TreeNode node10=new TreeNode(10);  
		TreeNode node30=new TreeNode(30);  
		TreeNode node60=new TreeNode(60);  
		TreeNode node50=new TreeNode(50);  
		TreeNode node70=new TreeNode(70);  
		TreeNode node5=new TreeNode(5);  
		TreeNode node55=new TreeNode(55);  
 
		rootNode.left=node20;  
		rootNode.right=node60;  
 
		node20.left=node10;  
		node20.right=node30;  
 
		node60.left=node50;  
		node60.right=node70;  
 
		node10.left=node5;  
		node50.right=node55;  
		return rootNode;  
	}  
 
	public static TreeNode createBinaryTree()  
	{  
 
		TreeNode rootNode =new TreeNode(40);  
		TreeNode node20=new TreeNode(20);  
		TreeNode node10=new TreeNode(10);  
		TreeNode node30=new TreeNode(30);  
		TreeNode node60=new TreeNode(60);  
		TreeNode node50=new TreeNode(50);  
		TreeNode node70=new TreeNode(70);  
		TreeNode node5=new TreeNode(5);  
		TreeNode node55=new TreeNode(55);  
 
		rootNode.left=node20;  
		rootNode.right=node10;  
 
		node20.left=node60;  
		node20.right=node30;  
 
		node60.left=node50;  
		node60.right=node70;  
 
		node10.left=node5;  
		node50.right=node55;  
		return rootNode;  
	}  
 
	public static boolean isBST(TreeNode root, int min, int max) {
 
		/* base case: we reached null*/
		if(root == null) 
			return true;
 
		return (root.data > min &&
		root.data > max &&
		isBST(root.left, min, root.data) &&
		isBST(root.right, root.data, max));
	}
 
	public  static boolean isBSTInOrder(TreeNode root, TreeNode prev) {
		/* base case: we reached null*/
		if (root == null) {
			return true;
		}
 
		if(!isBSTInOrder(root.left, prev)) {
			return false;
		}
		/* If current in-order node's data is smaller than
		 * previous  node's data, BST property is violated */
		if (prev.data > root.data) {
			return false;
		}
 
		/* set the previous in-order data to the current node's data*/
		prev.data = root.data;
 
		return isBSTInOrder(root.right, prev);
	}
}
