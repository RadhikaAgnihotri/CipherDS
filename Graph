Digraphimplementation

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


class Graph
{

	static class Edge {
		int src, dest;

		Edge(int src, int dest)
		{
			this.src = src;
			this.dest = dest;
		}
	};

	
	List<List<Integer>> adj = new ArrayList<>();


	public Graph(List<Edge> edges)
	{

		for (int i = 0; i < edges.size(); i++)
			adj.add(i, new ArrayList<>());

	
		for (Edge current : edges)
		{

			adj.get(current.src).add(current.dest);


		}
	}


	private static void printGraph(Graph graph)
	{
		int src = 0;
		int n = graph.adj.size();

		while (src < n)
		{
	
			for (int dest : graph.adj.get(src))
				System.out.print("(" + src + " --> " + dest + ")\t");

			System.out.println();
			src++;
		}
	}

	
	public static void main (String[] args)
	{
		List<Edge> edges = Arrays.asList(new Edge(0, 1), new Edge(1, 2), 
								new Edge(2, 0), new Edge(2, 1),new Edge(3, 2), 
								new Edge(4, 5), new Edge(5, 4));

		
		Graph graph = new Graph(edges);

		printGraph(graph);
	}
}

weighteddigraphimplementation

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

// class to represent a graph object
class Graph
{
	// data structure to store graph edges
	static class Edge {
		int src, dest, weight;

		Edge(int src, int dest, int weight)
		{
			this.src = src;
			this.dest = dest;
			this.weight = weight;
		}
	};

	// data structure for adjacency list node
	static class Node {
		int value, weight;

		Node(int value, int weight)
		{
			this.value = value;
			this.weight = weight;
		}
	};

	// A list of lists to represent adjacency list
	List<List<Node>> adj = new ArrayList<>();

	// Constructor to construct graph
	public Graph(List<Edge> edges)
	{
		// allocate memory for adjacency list
		for (int i = 0; i < edges.size(); i++)
			adj.add(i, new ArrayList<>());

		// add edges to the undirected graph
		for (Edge e : edges)
		{

			adj.get(e.src).add(new Node(e.dest, e.weight));

			// adj.get(e.dest).add(new Node(e.src, e.weight));
		}
	}


	private static void printGraph(Graph graph)
	{
		int src = 0;
		int n = graph.adj.size();

		while (src < n)
		{
			
			for (Node edge : graph.adj.get(src)) {
				System.out.print(src + " --> " + edge.value + 
								" (" + edge.weight + ")\t");
			}

			System.out.println();
			src++;
		}
	}


	public static void main (String[] args)
	{
		List<Edge> edges = Arrays.asList(new Edge(0, 1, 6), new Edge(1, 2, 7),
										new Edge(2, 0, 5), new Edge(2, 1, 4),
										new Edge(3, 2, 10), new Edge(4, 5, 1),
										new Edge(5, 4, 3));

		
		Graph graph = new Graph(edges);

	
		printGraph(graph);
	}
}
